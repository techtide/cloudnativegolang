// Code generated by protoc-gen-go. DO NOT EDIT.
// source: choose.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChooseRequest struct {
	N                    float64  `protobuf:"fixed64,1,opt,name=n,proto3" json:"n,omitempty"`
	K                    float64  `protobuf:"fixed64,2,opt,name=k,proto3" json:"k,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChooseRequest) Reset()         { *m = ChooseRequest{} }
func (m *ChooseRequest) String() string { return proto.CompactTextString(m) }
func (*ChooseRequest) ProtoMessage()    {}
func (*ChooseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe08363cab0b24c6, []int{0}
}

func (m *ChooseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChooseRequest.Unmarshal(m, b)
}
func (m *ChooseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChooseRequest.Marshal(b, m, deterministic)
}
func (m *ChooseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChooseRequest.Merge(m, src)
}
func (m *ChooseRequest) XXX_Size() int {
	return xxx_messageInfo_ChooseRequest.Size(m)
}
func (m *ChooseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChooseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChooseRequest proto.InternalMessageInfo

func (m *ChooseRequest) GetN() float64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *ChooseRequest) GetK() float64 {
	if m != nil {
		return m.K
	}
	return 0
}

type ChooseResponse struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChooseResponse) Reset()         { *m = ChooseResponse{} }
func (m *ChooseResponse) String() string { return proto.CompactTextString(m) }
func (*ChooseResponse) ProtoMessage()    {}
func (*ChooseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe08363cab0b24c6, []int{1}
}

func (m *ChooseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChooseResponse.Unmarshal(m, b)
}
func (m *ChooseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChooseResponse.Marshal(b, m, deterministic)
}
func (m *ChooseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChooseResponse.Merge(m, src)
}
func (m *ChooseResponse) XXX_Size() int {
	return xxx_messageInfo_ChooseResponse.Size(m)
}
func (m *ChooseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChooseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChooseResponse proto.InternalMessageInfo

func (m *ChooseResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*ChooseRequest)(nil), "pb.ChooseRequest")
	proto.RegisterType((*ChooseResponse)(nil), "pb.ChooseResponse")
}

func init() { proto.RegisterFile("choose.proto", fileDescriptor_fe08363cab0b24c6) }

var fileDescriptor_fe08363cab0b24c6 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xc8, 0xcf,
	0x2f, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe6, 0xe2,
	0x75, 0x06, 0x8b, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x70, 0x31, 0xe6, 0x49,
	0x30, 0x2a, 0x30, 0x6a, 0x30, 0x06, 0x31, 0xe6, 0x81, 0x78, 0xd9, 0x12, 0x4c, 0x10, 0x5e, 0xb6,
	0x92, 0x06, 0x17, 0x1f, 0x4c, 0x71, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18, 0x17, 0x5b,
	0x51, 0x6a, 0x71, 0x69, 0x4e, 0x09, 0x54, 0x0b, 0x94, 0x67, 0xe4, 0x0c, 0x33, 0x36, 0x38, 0xb5,
	0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x88, 0x8b, 0xdd, 0x39, 0x3f, 0xb7, 0xa0, 0xb4, 0x24, 0x55,
	0x48, 0x50, 0xaf, 0x20, 0x49, 0x0f, 0xc5, 0x52, 0x29, 0x21, 0x64, 0x21, 0x88, 0xd1, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x67, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x93, 0x88, 0x76, 0xa0, 0xb6,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChooseServiceClient is the client API for ChooseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChooseServiceClient interface {
	Compute(ctx context.Context, in *ChooseRequest, opts ...grpc.CallOption) (*ChooseResponse, error)
}

type chooseServiceClient struct {
	cc *grpc.ClientConn
}

func NewChooseServiceClient(cc *grpc.ClientConn) ChooseServiceClient {
	return &chooseServiceClient{cc}
}

func (c *chooseServiceClient) Compute(ctx context.Context, in *ChooseRequest, opts ...grpc.CallOption) (*ChooseResponse, error) {
	out := new(ChooseResponse)
	err := c.cc.Invoke(ctx, "/pb.ChooseService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChooseServiceServer is the server API for ChooseService service.
type ChooseServiceServer interface {
	Compute(context.Context, *ChooseRequest) (*ChooseResponse, error)
}

// UnimplementedChooseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChooseServiceServer struct {
}

func (*UnimplementedChooseServiceServer) Compute(ctx context.Context, req *ChooseRequest) (*ChooseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterChooseServiceServer(s *grpc.Server, srv ChooseServiceServer) {
	s.RegisterService(&_ChooseService_serviceDesc, srv)
}

func _ChooseService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChooseServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChooseService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChooseServiceServer).Compute(ctx, req.(*ChooseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChooseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChooseService",
	HandlerType: (*ChooseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _ChooseService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "choose.proto",
}
